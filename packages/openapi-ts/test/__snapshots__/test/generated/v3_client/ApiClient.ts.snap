import type { BaseHttpRequest } from './core/BaseHttpRequest';
import type { OpenAPIConfig } from './core/OpenAPI';
import { Interceptors } from './core/OpenAPI';
import { FetchHttpRequest } from './core/FetchHttpRequest';

import { CollectionFormatService } from './services.gen';
import { ComplexService } from './services.gen';
import { DefaultService } from './services.gen';
import { DefaultsService } from './services.gen';
import { DeprecatedService } from './services.gen';
import { DescriptionsService } from './services.gen';
import { DuplicateService } from './services.gen';
import { ErrorService } from './services.gen';
import { FileResponseService } from './services.gen';
import { FormDataService } from './services.gen';
import { HeaderService } from './services.gen';
import { MultipartService } from './services.gen';
import { MultipleTags1Service } from './services.gen';
import { MultipleTags2Service } from './services.gen';
import { MultipleTags3Service } from './services.gen';
import { NoContentService } from './services.gen';
import { NonAsciiÆøåÆøÅöôêÊService } from './services.gen';
import { ParametersService } from './services.gen';
import { RequestBodyService } from './services.gen';
import { ResponseService } from './services.gen';
import { SimpleService } from './services.gen';
import { TypesService } from './services.gen';
import { UploadService } from './services.gen';

type HttpRequestConstructor = new (config: OpenAPIConfig) => BaseHttpRequest;

export class ApiClient {

	public readonly collectionFormatService: CollectionFormatService;
	public readonly complexService: ComplexService;
	public readonly defaultService: DefaultService;
	public readonly defaultsService: DefaultsService;
	public readonly deprecatedService: DeprecatedService;
	public readonly descriptionsService: DescriptionsService;
	public readonly duplicateService: DuplicateService;
	public readonly errorService: ErrorService;
	public readonly fileResponseService: FileResponseService;
	public readonly formDataService: FormDataService;
	public readonly headerService: HeaderService;
	public readonly multipartService: MultipartService;
	public readonly multipleTags1Service: MultipleTags1Service;
	public readonly multipleTags2Service: MultipleTags2Service;
	public readonly multipleTags3Service: MultipleTags3Service;
	public readonly noContentService: NoContentService;
	public readonly nonAsciiÆøåÆøÅöôêÊservice: NonAsciiÆøåÆøÅöôêÊService;
	public readonly parametersService: ParametersService;
	public readonly requestBodyService: RequestBodyService;
	public readonly responseService: ResponseService;
	public readonly simpleService: SimpleService;
	public readonly typesService: TypesService;
	public readonly uploadService: UploadService;

	public readonly request: BaseHttpRequest;

	constructor(config?: Partial<OpenAPIConfig>, HttpRequest: HttpRequestConstructor = FetchHttpRequest) {
		this.request = new HttpRequest({
			BASE: config?.BASE ?? 'http://localhost:3000/base',
			VERSION: config?.VERSION ?? '1.0',
			WITH_CREDENTIALS: config?.WITH_CREDENTIALS ?? false,
			CREDENTIALS: config?.CREDENTIALS ?? 'include',
			TOKEN: config?.TOKEN,
			USERNAME: config?.USERNAME,
			PASSWORD: config?.PASSWORD,
			HEADERS: config?.HEADERS,
			ENCODE_PATH: config?.ENCODE_PATH,
			interceptors: {
				request: config?.interceptors?.request ?? new Interceptors(),
				response: config?.interceptors?.response ?? new Interceptors(),
      },
		});

		this.collectionFormatService = new CollectionFormatService(this.request);
		this.complexService = new ComplexService(this.request);
		this.defaultService = new DefaultService(this.request);
		this.defaultsService = new DefaultsService(this.request);
		this.deprecatedService = new DeprecatedService(this.request);
		this.descriptionsService = new DescriptionsService(this.request);
		this.duplicateService = new DuplicateService(this.request);
		this.errorService = new ErrorService(this.request);
		this.fileResponseService = new FileResponseService(this.request);
		this.formDataService = new FormDataService(this.request);
		this.headerService = new HeaderService(this.request);
		this.multipartService = new MultipartService(this.request);
		this.multipleTags1Service = new MultipleTags1Service(this.request);
		this.multipleTags2Service = new MultipleTags2Service(this.request);
		this.multipleTags3Service = new MultipleTags3Service(this.request);
		this.noContentService = new NoContentService(this.request);
		this.nonAsciiÆøåÆøÅöôêÊservice = new NonAsciiÆøåÆøÅöôêÊService(this.request);
		this.parametersService = new ParametersService(this.request);
		this.requestBodyService = new RequestBodyService(this.request);
		this.responseService = new ResponseService(this.request);
		this.simpleService = new SimpleService(this.request);
		this.typesService = new TypesService(this.request);
		this.uploadService = new UploadService(this.request);
	}
}
