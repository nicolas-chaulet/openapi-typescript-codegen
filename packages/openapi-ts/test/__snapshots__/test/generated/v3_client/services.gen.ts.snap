// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import type { BaseHttpRequest } from './core/BaseHttpRequest';
import type { ApiRequestOptions } from './core/ApiRequestOptions';
import { mergeDeep } from './core/request';
import type { $OpenApiTs } from './models.gen';

export class DefaultService {
    constructor(public readonly httpRequest: BaseHttpRequest) {}

    /**
     * @throws ApiError
     */
    public serviceWithEmptyTag(options: Partial<ApiRequestOptions> = {}): CancelablePromise<void> {
        return this.httpRequest.request(
            mergeDeep(
                {
                    method: 'GET',
                    url: '/api/v{api-version}/no-tag',
                },
                options
            )
        );
    }

    /**
     * @returns ModelWithReadOnlyAndWriteOnly
     * @throws ApiError
     */
    public postServiceWithEmptyTag(
        data: $OpenApiTs['/api/v{api-version}/no-tag']['post']['req'],
        options: Partial<ApiRequestOptions> = {}
    ): CancelablePromise<$OpenApiTs['/api/v{api-version}/no-tag']['post']['res'][200]> {
        const { requestBody } = data;
        return this.httpRequest.request(
            mergeDeep(
                {
                    method: 'POST',
                    url: '/api/v{api-version}/no-tag',
                    body: requestBody,
                    mediaType: 'application/json',
                },
                options
            )
        );
    }
}

export class SimpleService {
    constructor(public readonly httpRequest: BaseHttpRequest) {}

    /**
     * @returns Model_From_Zendesk Success
     * @throws ApiError
     */
    public apiVVersionOdataControllerCount(
        options: Partial<ApiRequestOptions> = {}
    ): CancelablePromise<$OpenApiTs['/api/v{api-version}/simple/$count']['get']['res'][200]> {
        return this.httpRequest.request(
            mergeDeep(
                {
                    method: 'GET',
                    url: '/api/v{api-version}/simple/$count',
                },
                options
            )
        );
    }

    /**
     * @throws ApiError
     */
    public getCallWithoutParametersAndResponse(options: Partial<ApiRequestOptions> = {}): CancelablePromise<void> {
        return this.httpRequest.request(
            mergeDeep(
                {
                    method: 'GET',
                    url: '/api/v{api-version}/simple',
                },
                options
            )
        );
    }

    /**
     * @throws ApiError
     */
    public putCallWithoutParametersAndResponse(options: Partial<ApiRequestOptions> = {}): CancelablePromise<void> {
        return this.httpRequest.request(
            mergeDeep(
                {
                    method: 'PUT',
                    url: '/api/v{api-version}/simple',
                },
                options
            )
        );
    }

    /**
     * @throws ApiError
     */
    public postCallWithoutParametersAndResponse(options: Partial<ApiRequestOptions> = {}): CancelablePromise<void> {
        return this.httpRequest.request(
            mergeDeep(
                {
                    method: 'POST',
                    url: '/api/v{api-version}/simple',
                },
                options
            )
        );
    }

    /**
     * @throws ApiError
     */
    public deleteCallWithoutParametersAndResponse(options: Partial<ApiRequestOptions> = {}): CancelablePromise<void> {
        return this.httpRequest.request(
            mergeDeep(
                {
                    method: 'DELETE',
                    url: '/api/v{api-version}/simple',
                },
                options
            )
        );
    }

    /**
     * @throws ApiError
     */
    public optionsCallWithoutParametersAndResponse(options: Partial<ApiRequestOptions> = {}): CancelablePromise<void> {
        return this.httpRequest.request(
            mergeDeep(
                {
                    method: 'OPTIONS',
                    url: '/api/v{api-version}/simple',
                },
                options
            )
        );
    }

    /**
     * @throws ApiError
     */
    public headCallWithoutParametersAndResponse(options: Partial<ApiRequestOptions> = {}): CancelablePromise<void> {
        return this.httpRequest.request(
            mergeDeep(
                {
                    method: 'HEAD',
                    url: '/api/v{api-version}/simple',
                },
                options
            )
        );
    }

    /**
     * @throws ApiError
     */
    public patchCallWithoutParametersAndResponse(options: Partial<ApiRequestOptions> = {}): CancelablePromise<void> {
        return this.httpRequest.request(
            mergeDeep(
                {
                    method: 'PATCH',
                    url: '/api/v{api-version}/simple',
                },
                options
            )
        );
    }
}

export class ParametersService {
    constructor(public readonly httpRequest: BaseHttpRequest) {}

    /**
     * @throws ApiError
     */
    public deleteFoo(
        data: $OpenApiTs['/api/v{api-version}/foo/{foo}/bar/{bar}']['delete']['req'],
        options: Partial<ApiRequestOptions> = {}
    ): CancelablePromise<void> {
        const { foo, bar } = data;
        return this.httpRequest.request(
            mergeDeep(
                {
                    method: 'DELETE',
                    url: '/api/v{api-version}/foo/{foo}/bar/{bar}',
                    path: {
                        foo,
                        bar,
                    },
                },
                options
            )
        );
    }

    /**
     * @throws ApiError
     */
    public callWithParameters(
        data: $OpenApiTs['/api/v{api-version}/parameters/{parameterPath}']['post']['req'],
        options: Partial<ApiRequestOptions> = {}
    ): CancelablePromise<void> {
        const {
            parameterHeader,
            fooAllOfEnum,
            parameterQuery,
            parameterForm,
            parameterCookie,
            parameterPath,
            requestBody,
            fooRefEnum,
        } = data;
        return this.httpRequest.request(
            mergeDeep(
                {
                    method: 'POST',
                    url: '/api/v{api-version}/parameters/{parameterPath}',
                    path: {
                        parameterPath,
                    },
                    cookies: {
                        parameterCookie,
                    },
                    headers: {
                        parameterHeader,
                    },
                    query: {
                        foo_ref_enum: fooRefEnum,
                        foo_all_of_enum: fooAllOfEnum,
                        parameterQuery,
                    },
                    formData: {
                        parameterForm,
                    },
                    body: requestBody,
                    mediaType: 'application/json',
                },
                options
            )
        );
    }

    /**
     * @throws ApiError
     */
    public callWithWeirdParameterNames(
        data: $OpenApiTs['/api/v{api-version}/parameters/{parameter.path.1}/{parameter-path-2}/{PARAMETER-PATH-3}']['post']['req'],
        options: Partial<ApiRequestOptions> = {}
    ): CancelablePromise<void> {
        const {
            parameterHeader,
            parameterQuery,
            parameterForm,
            parameterCookie,
            requestBody,
            parameterPath1,
            parameterPath2,
            parameterPath3,
            _default,
        } = data;
        return this.httpRequest.request(
            mergeDeep(
                {
                    method: 'POST',
                    url: '/api/v{api-version}/parameters/{parameter.path.1}/{parameter-path-2}/{PARAMETER-PATH-3}',
                    path: {
                        'parameter.path.1': parameterPath1,
                        'parameter-path-2': parameterPath2,
                        'PARAMETER-PATH-3': parameterPath3,
                    },
                    cookies: {
                        'PARAMETER-COOKIE': parameterCookie,
                    },
                    headers: {
                        'parameter.header': parameterHeader,
                    },
                    query: {
                        default: _default,
                        'parameter-query': parameterQuery,
                    },
                    formData: {
                        parameter_form: parameterForm,
                    },
                    body: requestBody,
                    mediaType: 'application/json',
                },
                options
            )
        );
    }

    /**
     * @throws ApiError
     */
    public getCallWithOptionalParam(
        data: $OpenApiTs['/api/v{api-version}/parameters/']['get']['req'],
        options: Partial<ApiRequestOptions> = {}
    ): CancelablePromise<void> {
        const { requestBody, parameter } = data;
        return this.httpRequest.request(
            mergeDeep(
                {
                    method: 'GET',
                    url: '/api/v{api-version}/parameters/',
                    query: {
                        parameter,
                    },
                    body: requestBody,
                    mediaType: 'application/json',
                },
                options
            )
        );
    }

    /**
     * @throws ApiError
     */
    public postCallWithOptionalParam(
        data: $OpenApiTs['/api/v{api-version}/parameters/']['post']['req'],
        options: Partial<ApiRequestOptions> = {}
    ): CancelablePromise<void> {
        const { parameter, requestBody } = data;
        return this.httpRequest.request(
            mergeDeep(
                {
                    method: 'POST',
                    url: '/api/v{api-version}/parameters/',
                    query: {
                        parameter,
                    },
                    body: requestBody,
                    mediaType: 'application/json',
                },
                options
            )
        );
    }
}

export class DescriptionsService {
    constructor(public readonly httpRequest: BaseHttpRequest) {}

    /**
     * @throws ApiError
     */
    public callWithDescriptions(
        data: $OpenApiTs['/api/v{api-version}/descriptions/']['post']['req'] = {},
        options: Partial<ApiRequestOptions> = {}
    ): CancelablePromise<void> {
        const {
            parameterWithBreaks,
            parameterWithBackticks,
            parameterWithSlashes,
            parameterWithExpressionPlaceholders,
            parameterWithQuotes,
            parameterWithReservedCharacters,
        } = data;
        return this.httpRequest.request(
            mergeDeep(
                {
                    method: 'POST',
                    url: '/api/v{api-version}/descriptions/',
                    query: {
                        parameterWithBreaks,
                        parameterWithBackticks,
                        parameterWithSlashes,
                        parameterWithExpressionPlaceholders,
                        parameterWithQuotes,
                        parameterWithReservedCharacters,
                    },
                },
                options
            )
        );
    }
}

export class DeprecatedService {
    constructor(public readonly httpRequest: BaseHttpRequest) {}

    /**
     * @deprecated
     * @throws ApiError
     */
    public deprecatedCall(
        data: $OpenApiTs['/api/v{api-version}/parameters/deprecated']['post']['req'],
        options: Partial<ApiRequestOptions> = {}
    ): CancelablePromise<void> {
        const { parameter } = data;
        return this.httpRequest.request(
            mergeDeep(
                {
                    method: 'POST',
                    url: '/api/v{api-version}/parameters/deprecated',
                    headers: {
                        parameter,
                    },
                },
                options
            )
        );
    }
}

export class RequestBodyService {
    constructor(public readonly httpRequest: BaseHttpRequest) {}

    /**
     * @throws ApiError
     */
    public postApiRequestBody(
        data: $OpenApiTs['/api/v{api-version}/requestBody/']['post']['req'] = {},
        options: Partial<ApiRequestOptions> = {}
    ): CancelablePromise<void> {
        const { parameter, foo } = data;
        return this.httpRequest.request(
            mergeDeep(
                {
                    method: 'POST',
                    url: '/api/v{api-version}/requestBody/',
                    query: {
                        parameter,
                    },
                    body: foo,
                    mediaType: 'application/json',
                },
                options
            )
        );
    }
}

export class FormDataService {
    constructor(public readonly httpRequest: BaseHttpRequest) {}

    /**
     * @throws ApiError
     */
    public postApiFormData(
        data: $OpenApiTs['/api/v{api-version}/formData/']['post']['req'] = {},
        options: Partial<ApiRequestOptions> = {}
    ): CancelablePromise<void> {
        const { parameter, formData } = data;
        return this.httpRequest.request(
            mergeDeep(
                {
                    method: 'POST',
                    url: '/api/v{api-version}/formData/',
                    query: {
                        parameter,
                    },
                    formData,
                    mediaType: 'multipart/form-data',
                },
                options
            )
        );
    }
}

export class DefaultsService {
    constructor(public readonly httpRequest: BaseHttpRequest) {}

    /**
     * @throws ApiError
     */
    public callWithDefaultParameters(
        data: $OpenApiTs['/api/v{api-version}/defaults']['get']['req'] = {},
        options: Partial<ApiRequestOptions> = {}
    ): CancelablePromise<void> {
        const { parameterString, parameterNumber, parameterBoolean, parameterEnum, parameterModel } = data;
        return this.httpRequest.request(
            mergeDeep(
                {
                    method: 'GET',
                    url: '/api/v{api-version}/defaults',
                    query: {
                        parameterString,
                        parameterNumber,
                        parameterBoolean,
                        parameterEnum,
                        parameterModel,
                    },
                },
                options
            )
        );
    }

    /**
     * @throws ApiError
     */
    public callWithDefaultOptionalParameters(
        data: $OpenApiTs['/api/v{api-version}/defaults']['post']['req'] = {},
        options: Partial<ApiRequestOptions> = {}
    ): CancelablePromise<void> {
        const { parameterString, parameterNumber, parameterBoolean, parameterEnum, parameterModel } = data;
        return this.httpRequest.request(
            mergeDeep(
                {
                    method: 'POST',
                    url: '/api/v{api-version}/defaults',
                    query: {
                        parameterString,
                        parameterNumber,
                        parameterBoolean,
                        parameterEnum,
                        parameterModel,
                    },
                },
                options
            )
        );
    }

    /**
     * @throws ApiError
     */
    public callToTestOrderOfParams(
        data: $OpenApiTs['/api/v{api-version}/defaults']['put']['req'],
        options: Partial<ApiRequestOptions> = {}
    ): CancelablePromise<void> {
        const {
            parameterStringWithNoDefault,
            parameterOptionalStringWithDefault,
            parameterOptionalStringWithEmptyDefault,
            parameterOptionalStringWithNoDefault,
            parameterStringWithDefault,
            parameterStringWithEmptyDefault,
            parameterStringNullableWithNoDefault,
            parameterStringNullableWithDefault,
        } = data;
        return this.httpRequest.request(
            mergeDeep(
                {
                    method: 'PUT',
                    url: '/api/v{api-version}/defaults',
                    query: {
                        parameterOptionalStringWithDefault,
                        parameterOptionalStringWithEmptyDefault,
                        parameterOptionalStringWithNoDefault,
                        parameterStringWithDefault,
                        parameterStringWithEmptyDefault,
                        parameterStringWithNoDefault,
                        parameterStringNullableWithNoDefault,
                        parameterStringNullableWithDefault,
                    },
                },
                options
            )
        );
    }
}

export class DuplicateService {
    constructor(public readonly httpRequest: BaseHttpRequest) {}

    /**
     * @throws ApiError
     */
    public duplicateName(options: Partial<ApiRequestOptions> = {}): CancelablePromise<void> {
        return this.httpRequest.request(
            mergeDeep(
                {
                    method: 'GET',
                    url: '/api/v{api-version}/duplicate',
                },
                options
            )
        );
    }

    /**
     * @throws ApiError
     */
    public duplicateName1(options: Partial<ApiRequestOptions> = {}): CancelablePromise<void> {
        return this.httpRequest.request(
            mergeDeep(
                {
                    method: 'POST',
                    url: '/api/v{api-version}/duplicate',
                },
                options
            )
        );
    }

    /**
     * @throws ApiError
     */
    public duplicateName2(options: Partial<ApiRequestOptions> = {}): CancelablePromise<void> {
        return this.httpRequest.request(
            mergeDeep(
                {
                    method: 'PUT',
                    url: '/api/v{api-version}/duplicate',
                },
                options
            )
        );
    }

    /**
     * @throws ApiError
     */
    public duplicateName3(options: Partial<ApiRequestOptions> = {}): CancelablePromise<void> {
        return this.httpRequest.request(
            mergeDeep(
                {
                    method: 'DELETE',
                    url: '/api/v{api-version}/duplicate',
                },
                options
            )
        );
    }
}

export class NoContentService {
    constructor(public readonly httpRequest: BaseHttpRequest) {}

    /**
     * @returns void Success
     * @throws ApiError
     */
    public callWithNoContentResponse(
        options: Partial<ApiRequestOptions> = {}
    ): CancelablePromise<$OpenApiTs['/api/v{api-version}/no-content']['get']['res'][204]> {
        return this.httpRequest.request(
            mergeDeep(
                {
                    method: 'GET',
                    url: '/api/v{api-version}/no-content',
                },
                options
            )
        );
    }

    /**
     * @returns number Response is a simple number
     * @returns void Success
     * @throws ApiError
     */
    public callWithResponseAndNoContentResponse(
        options: Partial<ApiRequestOptions> = {}
    ): CancelablePromise<
        | $OpenApiTs['/api/v{api-version}/multiple-tags/response-and-no-content']['get']['res'][200]
        | $OpenApiTs['/api/v{api-version}/multiple-tags/response-and-no-content']['get']['res'][204]
    > {
        return this.httpRequest.request(
            mergeDeep(
                {
                    method: 'GET',
                    url: '/api/v{api-version}/multiple-tags/response-and-no-content',
                },
                options
            )
        );
    }
}

export class ResponseService {
    constructor(public readonly httpRequest: BaseHttpRequest) {}

    /**
     * @returns number Response is a simple number
     * @returns void Success
     * @throws ApiError
     */
    public callWithResponseAndNoContentResponse(
        options: Partial<ApiRequestOptions> = {}
    ): CancelablePromise<
        | $OpenApiTs['/api/v{api-version}/multiple-tags/response-and-no-content']['get']['res'][200]
        | $OpenApiTs['/api/v{api-version}/multiple-tags/response-and-no-content']['get']['res'][204]
    > {
        return this.httpRequest.request(
            mergeDeep(
                {
                    method: 'GET',
                    url: '/api/v{api-version}/multiple-tags/response-and-no-content',
                },
                options
            )
        );
    }

    /**
     * @returns ModelWithString
     * @throws ApiError
     */
    public callWithResponse(
        options: Partial<ApiRequestOptions> = {}
    ): CancelablePromise<$OpenApiTs['/api/v{api-version}/response']['get']['res'][200]> {
        return this.httpRequest.request(
            mergeDeep(
                {
                    method: 'GET',
                    url: '/api/v{api-version}/response',
                },
                options
            )
        );
    }

    /**
     * @returns ModelWithString Message for default response
     * @throws ApiError
     */
    public callWithDuplicateResponses(
        options: Partial<ApiRequestOptions> = {}
    ): CancelablePromise<$OpenApiTs['/api/v{api-version}/response']['post']['res'][200]> {
        return this.httpRequest.request(
            mergeDeep(
                {
                    method: 'POST',
                    url: '/api/v{api-version}/response',
                    errors: {
                        500: 'Message for 500 error',
                        501: 'Message for 501 error',
                        502: 'Message for 502 error',
                    },
                },
                options
            )
        );
    }

    /**
     * @returns any Message for 200 response
     * @returns ModelWithString Message for default response
     * @returns ModelThatExtends Message for 201 response
     * @returns ModelThatExtendsExtends Message for 202 response
     * @throws ApiError
     */
    public callWithResponses(
        options: Partial<ApiRequestOptions> = {}
    ): CancelablePromise<
        | $OpenApiTs['/api/v{api-version}/response']['put']['res'][200]
        | $OpenApiTs['/api/v{api-version}/response']['put']['res'][200]
        | $OpenApiTs['/api/v{api-version}/response']['put']['res'][201]
        | $OpenApiTs['/api/v{api-version}/response']['put']['res'][202]
    > {
        return this.httpRequest.request(
            mergeDeep(
                {
                    method: 'PUT',
                    url: '/api/v{api-version}/response',
                    errors: {
                        500: 'Message for 500 error',
                        501: 'Message for 501 error',
                        502: 'Message for 502 error',
                    },
                },
                options
            )
        );
    }
}

export class MultipleTags1Service {
    constructor(public readonly httpRequest: BaseHttpRequest) {}

    /**
     * @returns void Success
     * @throws ApiError
     */
    public dummyA(
        options: Partial<ApiRequestOptions> = {}
    ): CancelablePromise<$OpenApiTs['/api/v{api-version}/multiple-tags/a']['get']['res'][204]> {
        return this.httpRequest.request(
            mergeDeep(
                {
                    method: 'GET',
                    url: '/api/v{api-version}/multiple-tags/a',
                },
                options
            )
        );
    }

    /**
     * @returns void Success
     * @throws ApiError
     */
    public dummyB(
        options: Partial<ApiRequestOptions> = {}
    ): CancelablePromise<$OpenApiTs['/api/v{api-version}/multiple-tags/b']['get']['res'][204]> {
        return this.httpRequest.request(
            mergeDeep(
                {
                    method: 'GET',
                    url: '/api/v{api-version}/multiple-tags/b',
                },
                options
            )
        );
    }
}

export class MultipleTags2Service {
    constructor(public readonly httpRequest: BaseHttpRequest) {}

    /**
     * @returns void Success
     * @throws ApiError
     */
    public dummyA(
        options: Partial<ApiRequestOptions> = {}
    ): CancelablePromise<$OpenApiTs['/api/v{api-version}/multiple-tags/a']['get']['res'][204]> {
        return this.httpRequest.request(
            mergeDeep(
                {
                    method: 'GET',
                    url: '/api/v{api-version}/multiple-tags/a',
                },
                options
            )
        );
    }

    /**
     * @returns void Success
     * @throws ApiError
     */
    public dummyB(
        options: Partial<ApiRequestOptions> = {}
    ): CancelablePromise<$OpenApiTs['/api/v{api-version}/multiple-tags/b']['get']['res'][204]> {
        return this.httpRequest.request(
            mergeDeep(
                {
                    method: 'GET',
                    url: '/api/v{api-version}/multiple-tags/b',
                },
                options
            )
        );
    }
}

export class MultipleTags3Service {
    constructor(public readonly httpRequest: BaseHttpRequest) {}

    /**
     * @returns void Success
     * @throws ApiError
     */
    public dummyB(
        options: Partial<ApiRequestOptions> = {}
    ): CancelablePromise<$OpenApiTs['/api/v{api-version}/multiple-tags/b']['get']['res'][204]> {
        return this.httpRequest.request(
            mergeDeep(
                {
                    method: 'GET',
                    url: '/api/v{api-version}/multiple-tags/b',
                },
                options
            )
        );
    }
}

export class CollectionFormatService {
    constructor(public readonly httpRequest: BaseHttpRequest) {}

    /**
     * @throws ApiError
     */
    public collectionFormat(
        data: $OpenApiTs['/api/v{api-version}/collectionFormat']['get']['req'],
        options: Partial<ApiRequestOptions> = {}
    ): CancelablePromise<void> {
        const { parameterArrayCsv, parameterArraySsv, parameterArrayTsv, parameterArrayPipes, parameterArrayMulti } =
            data;
        return this.httpRequest.request(
            mergeDeep(
                {
                    method: 'GET',
                    url: '/api/v{api-version}/collectionFormat',
                    query: {
                        parameterArrayCSV: parameterArrayCsv,
                        parameterArraySSV: parameterArraySsv,
                        parameterArrayTSV: parameterArrayTsv,
                        parameterArrayPipes,
                        parameterArrayMulti,
                    },
                },
                options
            )
        );
    }
}

export class TypesService {
    constructor(public readonly httpRequest: BaseHttpRequest) {}

    /**
     * @returns number Response is a simple number
     * @returns string Response is a simple string
     * @returns boolean Response is a simple boolean
     * @returns unknown Response is a simple object
     * @throws ApiError
     */
    public types(
        data: $OpenApiTs['/api/v{api-version}/types']['get']['req'],
        options: Partial<ApiRequestOptions> = {}
    ): CancelablePromise<
        | $OpenApiTs['/api/v{api-version}/types']['get']['res'][200]
        | $OpenApiTs['/api/v{api-version}/types']['get']['res'][201]
        | $OpenApiTs['/api/v{api-version}/types']['get']['res'][202]
        | $OpenApiTs['/api/v{api-version}/types']['get']['res'][203]
    > {
        const {
            parameterArray,
            parameterDictionary,
            parameterEnum,
            parameterNumber,
            parameterString,
            parameterBoolean,
            parameterObject,
            id,
        } = data;
        return this.httpRequest.request(
            mergeDeep(
                {
                    method: 'GET',
                    url: '/api/v{api-version}/types',
                    path: {
                        id,
                    },
                    query: {
                        parameterNumber,
                        parameterString,
                        parameterBoolean,
                        parameterObject,
                        parameterArray,
                        parameterDictionary,
                        parameterEnum,
                    },
                },
                options
            )
        );
    }
}

export class UploadService {
    constructor(public readonly httpRequest: BaseHttpRequest) {}

    /**
     * @returns boolean
     * @throws ApiError
     */
    public uploadFile(
        data: $OpenApiTs['/api/v{api-version}/upload']['post']['req'],
        options: Partial<ApiRequestOptions> = {}
    ): CancelablePromise<$OpenApiTs['/api/v{api-version}/upload']['post']['res'][200]> {
        const { file } = data;
        return this.httpRequest.request(
            mergeDeep(
                {
                    method: 'POST',
                    url: '/api/v{api-version}/upload',
                    formData: {
                        file,
                    },
                },
                options
            )
        );
    }
}

export class FileResponseService {
    constructor(public readonly httpRequest: BaseHttpRequest) {}

    /**
     * @returns binary Success
     * @throws ApiError
     */
    public fileResponse(
        data: $OpenApiTs['/api/v{api-version}/file/{id}']['get']['req'],
        options: Partial<ApiRequestOptions> = {}
    ): CancelablePromise<$OpenApiTs['/api/v{api-version}/file/{id}']['get']['res'][200]> {
        const { id } = data;
        return this.httpRequest.request(
            mergeDeep(
                {
                    method: 'GET',
                    url: '/api/v{api-version}/file/{id}',
                    path: {
                        id,
                    },
                },
                options
            )
        );
    }
}

export class ComplexService {
    constructor(public readonly httpRequest: BaseHttpRequest) {}

    /**
     * @returns ModelWithString Successful response
     * @throws ApiError
     */
    public complexTypes(
        data: $OpenApiTs['/api/v{api-version}/complex']['get']['req'],
        options: Partial<ApiRequestOptions> = {}
    ): CancelablePromise<$OpenApiTs['/api/v{api-version}/complex']['get']['res'][200]> {
        const { parameterObject, parameterReference } = data;
        return this.httpRequest.request(
            mergeDeep(
                {
                    method: 'GET',
                    url: '/api/v{api-version}/complex',
                    query: {
                        parameterObject,
                        parameterReference,
                    },
                    errors: {
                        400: '400 server error',
                        500: '500 server error',
                    },
                },
                options
            )
        );
    }

    /**
     * @returns ModelWithString Success
     * @throws ApiError
     */
    public complexParams(
        data: $OpenApiTs['/api/v{api-version}/complex/{id}']['put']['req'],
        options: Partial<ApiRequestOptions> = {}
    ): CancelablePromise<$OpenApiTs['/api/v{api-version}/complex/{id}']['put']['res'][200]> {
        const { id, requestBody } = data;
        return this.httpRequest.request(
            mergeDeep(
                {
                    method: 'PUT',
                    url: '/api/v{api-version}/complex/{id}',
                    path: {
                        id,
                    },
                    body: requestBody,
                    mediaType: 'application/json-patch+json',
                },
                options
            )
        );
    }
}

export class MultipartService {
    constructor(public readonly httpRequest: BaseHttpRequest) {}

    /**
     * @throws ApiError
     */
    public multipartRequest(
        data: $OpenApiTs['/api/v{api-version}/multipart']['post']['req'] = {},
        options: Partial<ApiRequestOptions> = {}
    ): CancelablePromise<void> {
        const { formData } = data;
        return this.httpRequest.request(
            mergeDeep(
                {
                    method: 'POST',
                    url: '/api/v{api-version}/multipart',
                    formData,
                    mediaType: 'multipart/form-data',
                },
                options
            )
        );
    }

    /**
     * @returns any OK
     * @throws ApiError
     */
    public multipartResponse(
        options: Partial<ApiRequestOptions> = {}
    ): CancelablePromise<$OpenApiTs['/api/v{api-version}/multipart']['get']['res'][200]> {
        return this.httpRequest.request(
            mergeDeep(
                {
                    method: 'GET',
                    url: '/api/v{api-version}/multipart',
                },
                options
            )
        );
    }
}

export class HeaderService {
    constructor(public readonly httpRequest: BaseHttpRequest) {}

    /**
     * @returns string Successful response
     * @throws ApiError
     */
    public callWithResultFromHeader(
        options: Partial<ApiRequestOptions> = {}
    ): CancelablePromise<$OpenApiTs['/api/v{api-version}/header']['post']['res'][200]> {
        return this.httpRequest.request(
            mergeDeep(
                {
                    method: 'POST',
                    url: '/api/v{api-version}/header',
                    responseHeader: 'operation-location',
                    errors: {
                        400: '400 server error',
                        500: '500 server error',
                    },
                },
                options
            )
        );
    }
}

export class ErrorService {
    constructor(public readonly httpRequest: BaseHttpRequest) {}

    /**
     * @returns any Custom message: Successful response
     * @throws ApiError
     */
    public testErrorCode(
        data: $OpenApiTs['/api/v{api-version}/error']['post']['req'],
        options: Partial<ApiRequestOptions> = {}
    ): CancelablePromise<$OpenApiTs['/api/v{api-version}/error']['post']['res'][200]> {
        const { status } = data;
        return this.httpRequest.request(
            mergeDeep(
                {
                    method: 'POST',
                    url: '/api/v{api-version}/error',
                    query: {
                        status,
                    },
                    errors: {
                        500: 'Custom message: Internal Server Error',
                        501: 'Custom message: Not Implemented',
                        502: 'Custom message: Bad Gateway',
                        503: 'Custom message: Service Unavailable',
                    },
                },
                options
            )
        );
    }
}

export class NonAsciiÆøåÆøÅöôêÊService {
    constructor(public readonly httpRequest: BaseHttpRequest) {}

    /**
     * @returns NonAsciiStringæøåÆØÅöôêÊ字符串 Successful response
     * @throws ApiError
     */
    public nonAsciiæøåÆøÅöôêÊ字符串(
        data: $OpenApiTs['/api/v{api-version}/non-ascii-æøåÆØÅöôêÊ字符串']['post']['req'],
        options: Partial<ApiRequestOptions> = {}
    ): CancelablePromise<$OpenApiTs['/api/v{api-version}/non-ascii-æøåÆØÅöôêÊ字符串']['post']['res'][200]> {
        const { nonAsciiParamæøåÆøÅöôêÊ } = data;
        return this.httpRequest.request(
            mergeDeep(
                {
                    method: 'POST',
                    url: '/api/v{api-version}/non-ascii-æøåÆØÅöôêÊ字符串',
                    query: {
                        nonAsciiParamæøåÆØÅöôêÊ: nonAsciiParamæøåÆøÅöôêÊ,
                    },
                },
                options
            )
        );
    }
}
