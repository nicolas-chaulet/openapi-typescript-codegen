{{#equals @root.$config.client 'angular'}}
@Injectable({
  providedIn: 'root',
})
{{/equals}}
export class {{{name}}}{{{@root.$config.postfixServices}}} {
	{{#if @root.$config.name}}
	constructor(public readonly httpRequest: BaseHttpRequest) {}

	{{else}}
	{{#equals @root.$config.client 'angular'}}
	constructor(public readonly http: HttpClient) {}

	{{/equals}}
	{{/if}}
	{{#each operations}}
	{{{toOperationComment this}}}
	{{#if @root.$config.name}}
	{{#equals @root.$config.client 'angular'}}
	public {{{name}}}({{{nameOperationDataType 'req' this}}}): Observable<{{{nameOperationDataType 'res' this}}}> {
		{{{dataDestructure this}}}
		return this.httpRequest.request(mergeDeep({{{toRequestOptions this}}}, options));
	}
	{{else}}
	public {{{name}}}({{{nameOperationDataType 'req' this}}}): CancelablePromise<{{{nameOperationDataType 'res' this}}}> {
		{{{dataDestructure this}}}
		return this.httpRequest.request(mergeDeep({{{toRequestOptions this}}}, options));
	}
	{{/equals}}
	{{else}}
	{{#equals @root.$config.client 'angular'}}
	public {{{name}}}({{{nameOperationDataType 'req' this}}}): Observable<{{{nameOperationDataType 'res' this}}}> {
		{{{dataDestructure this}}}
		return __request(OpenAPI, mergeDeep({{{toRequestOptions this}}}, options));
	}
	{{else}}
	public static {{{name}}}({{{nameOperationDataType 'req' this}}}): CancelablePromise<{{{nameOperationDataType 'res' this}}}> {
		{{{dataDestructure this}}}
		return __request(OpenAPI, mergeDeep({{{toRequestOptions this}}}, options));
	}
	{{/equals}}
	{{/if}}

	{{/each}}
}
